# -*- coding: utf-8 -*-
"""RedditAPI_using_PRAW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGxjtofFWibJmcBpWpYR9oNQRMKKcR0X

**Setting up Reddit API Access**:

This section establishes a connection to the Reddit API using praw. You'll need to replace the placeholders for client_id, client_secret, and user_agent with your actual Reddit API credentials. These credentials identify your application to Reddit.

**Defining Targets for Data Collection**:

subreddits: This list specifies the Reddit communities (subreddits) that the code will collect data from. In this case, it's "stocks" and "investing."
tickers: This list contains the stock symbols (tickers) that the code will search for within the Reddit posts.

**Fetching Reddit Posts**:

This function fetch_reddit_posts does the following:
Takes a ticker (stock symbol) and an optional limit (number of posts to fetch, defaulting to 100).
Iterates through the subreddits specified earlier.
Searches for posts in each subreddit that contain the ticker.
Extracts relevant information from each post (ticker, title, score, comments, creation time, content, upvote ratio) and stores it in a list.
Converts the list of posts into a pandas DataFrame for easier handling.

**Performing Sentiment Analysis**:

This function analyze_sentiment:
Takes a DataFrame of Reddit posts (posts_df).
Uses TextBlob to analyze the sentiment of the post title and content. The get_sentiment function calculates a polarity score (positive, negative, or neutral) for a given text.
Adds new columns to the DataFrame
"""

!pip install praw

import praw
import pandas as pd
from textblob import TextBlob
from sklearn.preprocessing import MinMaxScaler
import numpy as np

# Reddit API credentials (replace with your own credentials)
reddit = praw.Reddit(
    client_id="EzytCSjaTbNqdvTflEl4iw",
    client_secret="GIshSLj10RYsKTGobqmBzCL8hpc4ug",
    user_agent="Stock_Post"
)

# Subreddits to scrape and stock tickers to monitor
subreddits = ["stocks", "investing"]
tickers = ["AAPL", "MSFT", "GOOG", "AMZN", "TSLA"]

def fetch_reddit_posts(ticker, limit=100):
    """
    Fetches posts from the specified subreddits containing the given stock ticker.
    """
    posts = []
    for subreddit_name in subreddits:
        subreddit = reddit.subreddit(subreddit_name)
        for post in subreddit.search(ticker, limit=limit):
            posts.append({
                "ticker": ticker,
                "title": post.title,
                "score": post.score,
                "num_comments": post.num_comments,
                "created_utc": post.created_utc,
                "content": post.selftext,
                "upvote_ratio": post.upvote_ratio
            })
    return pd.DataFrame(posts)

def analyze_sentiment(posts_df):
    """
    Performs sentiment analysis on the titles and content of Reddit posts.
    """
    def get_sentiment(text):
        blob = TextBlob(text)
        return blob.sentiment.polarity

    posts_df["title_sentiment"] = posts_df["title"].apply(get_sentiment)
    posts_df["content_sentiment"] = posts_df["content"].apply(get_sentiment)
    posts_df["average_sentiment"] = posts_df[["title_sentiment", "content_sentiment"]].mean(axis=1)
    return posts_df

# Fetch and process posts for all tickers
all_posts = []
for ticker in tickers:
    posts = fetch_reddit_posts(ticker)
    if not posts.empty:
        posts = analyze_sentiment(posts)
        all_posts.append(posts)

# Combine sentiment data for all tickers
reddit_sentiment_df = pd.concat(all_posts, ignore_index=True)
reddit_sentiment_df.to_csv("reddit_sentiment_data.csv", index=False)