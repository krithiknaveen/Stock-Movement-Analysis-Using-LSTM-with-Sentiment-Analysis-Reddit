# -*- coding: utf-8 -*-
"""MergingReddit_with_yhfinance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Raq3WWjz3xBNGINUOIxVe0DeJ580ukyA

**Fetching and Preparing Stock Data**

* Import yfinance: import yfinance as yf imports the yfinance library, which is used to download stock market data. It's given the alias yf for easier use in the code.

**Download Stock Data:**

* nasdaq_tickers = tickers assigns the list of stock symbols (tickers) to nasdaq_tickers. This assumes you have a list of stock symbols defined elsewhere in your code (likely the tickers variable).
* stock_data = yf.download(nasdaq_tickers, start="2018-01-01", end="2023-01-01") uses yfinance to download historical stock data for the specified nasdaq_tickers from January 1, 2018, to January 1, 2023.
* stock_prices = stock_data["Adj Close"] extracts the "Adjusted Close" prices from the downloaded stock_data. Adjusted Close prices are often used in financial analysis because they account for stock splits and dividends.

**Normalize Stock Prices:**

* scaler = MinMaxScaler(feature_range=(0, 1)) creates a MinMaxScaler object. This is used to scale the stock prices to a specific range (0 to 1 in this case). Scaling is often done to improve the performance of machine learning models.
* scaled_prices = scaler.fit_transform(stock_prices) applies the scaling to the stock_prices data.

**Merging Sentiment and Stock Data**

**Prepare Sentiment Data:** reddit_sentiment_df["created_date"] = pd.to_datetime(reddit_sentiment_df["created_utc"], unit="s") converts the created_utc column (which likely represents the post creation time in Unix timestamp format) in the reddit_sentiment_df DataFrame to a datetime format using pd.to_datetime.

**Merge DataFrames:**

* merged_data = pd.merge_asof(...) performs an "as-of" merge between the reddit_sentiment_df and the stock_prices DataFrame. This type of merge is commonly used with time series data to align data points based on the closest date.
* It merges based on the created_date column.
The stock_prices DataFrame is first reset its index (using reset_index()) and the "Date" column is renamed to "created_date" to match the column in the reddit_sentiment_df.

**Handle Missing Values:** merged_data.fillna(method="bfill", inplace=True) fills any missing values (NaN) in the merged_data DataFrame using backward fill (bfill). This means that if a stock price is missing for a particular date, it will be filled with the next available stock price.

**Save Merged Data:** merged_data.to_csv("merged_data.csv", index=False) saves the merged DataFrame to a CSV file named "merged_data.csv". The index=False argument prevents the DataFrame index from being saved to the file.
"""

import yfinance as yf

# Fetch NASDAQ stock data
nasdaq_tickers = tickers  # Same tickers monitored on Reddit
stock_data = yf.download(nasdaq_tickers, start="2018-01-01", end="2023-01-01")
stock_prices = stock_data["Adj Close"]

# Normalize stock prices
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_prices = scaler.fit_transform(stock_prices)

# Merge Reddit sentiment data with stock prices
reddit_sentiment_df["created_date"] = pd.to_datetime(reddit_sentiment_df["created_utc"], unit="s")
merged_data = pd.merge_asof(
    reddit_sentiment_df.sort_values("created_date"),
    stock_prices.reset_index().rename(columns={"Date": "created_date"}),
    on="created_date"
)

merged_data.fillna(method="bfill", inplace=True)
merged_data.to_csv("merged_data.csv", index=False)